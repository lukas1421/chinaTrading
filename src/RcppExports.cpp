// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// timesThree
NumericVector timesThree(NumericVector x);
RcppExport SEXP _chinaTrading_timesThree(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesThree(x));
    return rcpp_result_gen;
END_RCPP
}
// getMean
double getMean(NumericVector x);
RcppExport SEXP _chinaTrading_getMean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getMean(x));
    return rcpp_result_gen;
END_RCPP
}
// getSharpe
double getSharpe(NumericVector x);
RcppExport SEXP _chinaTrading_getSharpe(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getSharpe(x));
    return rcpp_result_gen;
END_RCPP
}
// getSD
double getSD(NumericVector x);
RcppExport SEXP _chinaTrading_getSD(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getSD(x));
    return rcpp_result_gen;
END_RCPP
}
// getTicker
std::vector< std::string > getTicker(std::vector<std::string> s);
RcppExport SEXP _chinaTrading_getTicker(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(getTicker(s));
    return rcpp_result_gen;
END_RCPP
}
// getOneTicker
std::string getOneTicker(std::string s);
RcppExport SEXP _chinaTrading_getOneTicker(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(getOneTicker(s));
    return rcpp_result_gen;
END_RCPP
}
// getSum
double getSum(NumericVector x);
RcppExport SEXP _chinaTrading_getSum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getSum(x));
    return rcpp_result_gen;
END_RCPP
}
// getSumChgC
List getSumChgC(NumericVector x);
RcppExport SEXP _chinaTrading_getSumChgC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getSumChgC(x));
    return rcpp_result_gen;
END_RCPP
}
// getDayCumSharpeCpp
DataFrame getDayCumSharpeCpp(NumericVector x);
RcppExport SEXP _chinaTrading_getDayCumSharpeCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getDayCumSharpeCpp(x));
    return rcpp_result_gen;
END_RCPP
}
// getYtdCumSharpeCpp
DataFrame getYtdCumSharpeCpp(NumericVector x);
RcppExport SEXP _chinaTrading_getYtdCumSharpeCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getYtdCumSharpeCpp(x));
    return rcpp_result_gen;
END_RCPP
}
// getPercentileCpp
double getPercentileCpp(DataFrame x);
RcppExport SEXP _chinaTrading_getPercentileCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getPercentileCpp(x));
    return rcpp_result_gen;
END_RCPP
}
// calcSharpeCpp
List calcSharpeCpp(NumericVector x);
RcppExport SEXP _chinaTrading_calcSharpeCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(calcSharpeCpp(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_chinaTrading_timesThree", (DL_FUNC) &_chinaTrading_timesThree, 1},
    {"_chinaTrading_getMean", (DL_FUNC) &_chinaTrading_getMean, 1},
    {"_chinaTrading_getSharpe", (DL_FUNC) &_chinaTrading_getSharpe, 1},
    {"_chinaTrading_getSD", (DL_FUNC) &_chinaTrading_getSD, 1},
    {"_chinaTrading_getTicker", (DL_FUNC) &_chinaTrading_getTicker, 1},
    {"_chinaTrading_getOneTicker", (DL_FUNC) &_chinaTrading_getOneTicker, 1},
    {"_chinaTrading_getSum", (DL_FUNC) &_chinaTrading_getSum, 1},
    {"_chinaTrading_getSumChgC", (DL_FUNC) &_chinaTrading_getSumChgC, 1},
    {"_chinaTrading_getDayCumSharpeCpp", (DL_FUNC) &_chinaTrading_getDayCumSharpeCpp, 1},
    {"_chinaTrading_getYtdCumSharpeCpp", (DL_FUNC) &_chinaTrading_getYtdCumSharpeCpp, 1},
    {"_chinaTrading_getPercentileCpp", (DL_FUNC) &_chinaTrading_getPercentileCpp, 1},
    {"_chinaTrading_calcSharpeCpp", (DL_FUNC) &_chinaTrading_calcSharpeCpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_chinaTrading(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
